workflows:
  ios-app-store:
    name: iOS App Store Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      groups:
        - ios
      vars:
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
      xcode: 14.3.1
      cocoapods: default
    
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "main"
          include: true
          source: true
    
    cache:
      cache_paths:
        - $CM_BUILD_DIR
        - ~/.cocoapods
        - ~/Library/Caches/CocoaPods
    
    scripts:

      - name: Clean Xcode caches and provisioning data
        script: |
          echo "🧹 Cleaning DerivedData and provisioning cache..."
          rm -rf ~/Library/Developer/Xcode/DerivedData/*
          rm -rf ~/Library/MobileDevice/Provisioning\ Profiles/*
          xcodebuild -list > /dev/null 2>&1 || true


      - name: Download libiPhone-lib.a from Google Drive
        script: |
          set -e
          
          FILE_ID="1KqTRS-jBMWM2VqRrUP7ZuDraaQCnhKgr"
          OUTPUT_PATH="Libraries/libiPhone-lib.a"
          
          echo "📥 Downloading libiPhone-lib.a from Google Drive..."
          
          mkdir -p Libraries
          
          pip3 install gdown --quiet || true
          gdown "https://drive.google.com/uc?id=${FILE_ID}" -O "${OUTPUT_PATH}"
          
          if [ -f "${OUTPUT_PATH}" ]; then
            echo "✅ Successfully downloaded libiPhone-lib.a"
            ls -lh "${OUTPUT_PATH}"
          else
            echo "❌ Failed to download libiPhone-lib.a"
            exit 1
          fi
      
      - name: Set up code signing
        script: |
          set -e
          
          echo $PROVISION_PROFILE_BASE64 | base64 --decode > /tmp/profile.mobileprovision
          PROFILE_UUID=$(grep UUID -A1 -a /tmp/profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
          
          PROFILE_NAME=$(security cms -D -i /tmp/profile.mobileprovision | plutil -extract Name raw -)
          echo "PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV
          
          echo $P12_BASE64 | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "" build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P $P12_PASSWORD -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          CERTIFICATE_NAME=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | head -1 | sed -n 's/.*"\(.*\)".*/\1/p')
          if [ -z "$CERTIFICATE_NAME" ]; then
            CERTIFICATE_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Apple Distribution" | head -1 | sed -n 's/.*"\(.*\)".*/\1/p')
          fi
          echo "CERTIFICATE_NAME=$CERTIFICATE_NAME" >> $CM_ENV
          echo "Found certificate: $CERTIFICATE_NAME"
      
      - name: Reset Xcode target capabilities
        script: |
          echo "🧩 Removing duplicated entitlements to prevent provisioning crash..."
          find . -name "*.entitlements" -exec plutil -remove aps-environment {} \; 2>/dev/null || true


      - name: Install CocoaPods dependencies
        script: |
          set -e
          
          if [ -f "Podfile" ]; then
            echo "Found Podfile, recreating it with proper configuration..."
            cp Podfile Podfile.backup
            
            cat > Podfile <<'EOF'
          platform :ios, '13.0'
          
          use_frameworks! :linkage => :static
          
          target 'Unity-iPhone' do
            pod 'Google-Mobile-Ads-SDK', '~> 11.0'
            pod 'GoogleUserMessagingPlatform', '~> 2.0'
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
                config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
                config.build_settings['CLANG_WARN_NON_MODULAR_INCLUDE_IN_FRAMEWORK_MODULE'] = 'NO'
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
              end
            end
          end
          EOF
            
            echo "Running pod install..."
            rm -rf Pods Podfile.lock
            pod install --repo-update
            
            if [ -d "Unity-iPhone.xcworkspace" ]; then
              echo "✅ Workspace created successfully"
            else
              echo "❌ ERROR: Workspace not created!"
              ls -la
              exit 1
            fi
          else
            echo "❌ ERROR: No Podfile found!"
            exit 1
          fi
      
      - name: Update Xcode project with signing and disable GameAssembly
        script: |
          set -e
          gem install xcodeproj --no-document || true
          
          echo "🧹 Cleaning xcconfig files..."
          find . -name "*.xcconfig" -type f | while read -r file; do
            if grep -q "GameAssembly\|/Google-Mobile-Ads-SDK\|/GoogleUserMessagingPlatform" "$file" 2>/dev/null; then
              echo "  Cleaning $file"
              sed -i '' 's/-lGameAssembly//g' "$file"
              sed -i '' 's|-L/Google-Mobile-Ads-SDK||g' "$file"
              sed -i '' 's|-L/GoogleUserMessagingPlatform||g' "$file"
            fi
          done
          
          ruby <<'RUBY'
          require 'xcodeproj'
          project = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          
          target = project.targets.find { |t| t.name == 'Unity-iPhone' }
          target.build_configurations.each do |config|
            config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
            config.build_settings['CODE_SIGN_IDENTITY'] = ENV['CERTIFICATE_NAME']
            config.build_settings['DEVELOPMENT_TEAM'] = 'JQ8ZF3V63Z'
            config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
            config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'YES'
          end
          
          unity_framework = project.targets.find { |t| t.name == 'UnityFramework' }
          unity_framework.build_configurations.each do |config|
            config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
            config.build_settings['CODE_SIGN_IDENTITY'] = ENV['CERTIFICATE_NAME']
            config.build_settings['DEVELOPMENT_TEAM'] = 'JQ8ZF3V63Z'
            config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
            config.build_settings.delete('PROVISIONING_PROFILE')
            config.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = ENV['CERTIFICATE_NAME']
            
            config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
            config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
            config.build_settings['CLANG_WARN_NON_MODULAR_INCLUDE_IN_FRAMEWORK_MODULE'] = 'NO'
            
            other_cflags = config.build_settings['OTHER_CFLAGS'] || []
            other_cflags = [other_cflags] if other_cflags.is_a?(String)
            other_cflags.delete_if { |flag| flag.to_s.include?('non-modular-include-in-framework-module') }
            other_cflags << '-Wno-error=non-modular-include-in-framework-module'
            other_cflags << '-Wno-non-modular-include-in-framework-module'
            other_cflags << '-Wno-atomic-memory-ordering'
            config.build_settings['OTHER_CFLAGS'] = other_cflags.uniq
            
            config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
            config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
            config.build_settings['ENABLE_BITCODE'] = 'NO'
            
            config.build_settings['OTHER_LDFLAGS'] = ['$(inherited)', '-ObjC']
            
            config.build_settings['LIBRARY_SEARCH_PATHS'] = [
              '$(inherited)',
              '${PODS_CONFIGURATION_BUILD_DIR}/Google-Mobile-Ads-SDK',
              '${PODS_CONFIGURATION_BUILD_DIR}/GoogleUserMessagingPlatform',
              '$(PROJECT_DIR)/Libraries'
            ]
            
            config.build_settings['LD_RUNPATH_SEARCH_PATHS'] = [
              '$(inherited)',
              '@executable_path/Frameworks',
              '@loader_path/Frameworks'
            ]
          end
          
          game_assembly = project.targets.find { |t| t.name == 'GameAssembly' }
          if game_assembly
            game_assembly.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['DEVELOPMENT_TEAM'] = 'JQ8ZF3V63Z'
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
            end
            
            game_assembly.shell_script_build_phases.each do |phase|
              phase.shell_script = 'echo "Skipping GameAssembly IL2CPP compilation"; exit 0'
            end
            
            puts "✅ Disabled GameAssembly build script"
          end
          
          project.save
          RUBY
          
          ruby <<'RUBY'
          require 'xcodeproj'
          pods_project = Xcodeproj::Project.open('Pods/Pods.xcodeproj')
          
          pods_project.targets.each do |target|
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['CODE_SIGN_IDENTITY'] = ''
              config.build_settings['DEVELOPMENT_TEAM'] = ''
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
            end
          end
          
          pods_project.save
          RUBY
          
          echo "🔧 Nuclear option: removing GameAssembly from EVERYWHERE..."
          
          # Clean project.pbxproj
          sed -i '' 's/-lGameAssembly//g' Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' 's|"-L/Google-Mobile-Ads-SDK"||g' Unity-iPhone.xcodeproj/project.pbxproj
          sed -i '' 's|"-L/GoogleUserMessagingPlatform"||g' Unity-iPhone.xcodeproj/project.pbxproj
          
          # Clean xcscheme files
          find Unity-iPhone.xcodeproj -name "*.xcscheme" -exec sed -i '' 's/-lGameAssembly//g' {} \;
          find Unity-iPhone.xcworkspace -name "*.xcscheme" -exec sed -i '' 's/-lGameAssembly//g' {} \; 2>/dev/null || true
          
          # Clean ALL xcconfig files recursively
          find . -name "*.xcconfig" -exec sed -i '' 's/-lGameAssembly//g' {} \;
          
          # Verify it's gone
          echo "🔍 Verifying GameAssembly removal..."
          if grep -r "lGameAssembly" Unity-iPhone.xcodeproj/project.pbxproj; then
            echo "⚠️  Still found GameAssembly references, doing aggressive clean..."
            # More aggressive - remove entire lines containing GameAssembly
            sed -i '' '/lGameAssembly/d' Unity-iPhone.xcodeproj/project.pbxproj
          fi
          
          echo "✅ Project configuration complete"
      
      - name: Create export options
        script: |
          cat > $HOME/export_options.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>JQ8ZF3V63Z</string>
            <key>uploadSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
      
      - name: Build IPA
        script: |
          set -e
          
          if [ ! -d "Unity-iPhone.xcworkspace" ]; then
            echo "❌ ERROR: Unity-iPhone.xcworkspace not found"
            exit 1
          fi
          
          echo "Building with workspace (CocoaPods)"
          
          xcodebuild \
            -workspace "Unity-iPhone.xcworkspace" \
            -scheme "$XCODE_SCHEME" \
            -archivePath "$HOME/build/Unity-iPhone.xcarchive" \
            -configuration Release \
            archive \
            COMPILER_INDEX_STORE_ENABLE=NO \
            ENABLE_BITCODE=NO \
            2>&1 | tee "$HOME/xcodebuild_archive.log"
          
          if [ ! -d "$HOME/build/Unity-iPhone.xcarchive" ]; then
            echo "❌ Archive failed! Checking logs..."
            echo ""
            echo "=== Last 100 lines of build log ==="
            tail -100 "$HOME/xcodebuild_archive.log"
            echo ""
            echo "=== Searching for errors ==="
            grep -i "error:" "$HOME/xcodebuild_archive.log" | tail -20 || echo "No specific errors found"
            exit 1
          fi
          
          echo "✅ Archive created successfully"
          
          xcodebuild \
            -exportArchive \
            -archivePath "$HOME/build/Unity-iPhone.xcarchive" \
            -exportPath "$HOME/build" \
            -exportOptionsPlist "$HOME/export_options.plist" \
            2>&1 | tee "$HOME/xcodebuild_export.log"
          
          mkdir -p build/ios/ipa
          cp "$HOME/build/"*.ipa build/ios/ipa/ 2>/dev/null || true
          
          echo "✅ Build completed successfully"
    
    artifacts:
      - build/ios/ipa/*.ipa
      - $HOME/build/*.ipa
      - $HOME/xcodebuild_*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    
    publishing:
      email:
        recipients:
          - joshtimallendev@gmail.com
        notify:
          success: true
          failure: true
      
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true