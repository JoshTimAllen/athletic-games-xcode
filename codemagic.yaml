workflows:
  ios-app-store:
    name: iOS App Store Build
    max_build_duration: 120
    instance_type: mac_mini_m1
    environment:
      groups:
        - ios
      vars:
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
      xcode: latest
      cocoapods: default
    
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "main"
          include: true
          source: true
    
    scripts:
      - name: Set up code signing
        script: |
          set -e
          
          echo $PROVISION_PROFILE_BASE64 | base64 --decode > /tmp/profile.mobileprovision
          PROFILE_UUID=$(grep UUID -A1 -a /tmp/profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
          
          PROFILE_NAME=$(security cms -D -i /tmp/profile.mobileprovision | plutil -extract Name raw -)
          echo "PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV
          
          echo $P12_BASE64 | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "" build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P $P12_PASSWORD -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          
          CERTIFICATE_NAME=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | head -1 | sed -n 's/.*"\(.*\)".*/\1/p')
          if [ -z "$CERTIFICATE_NAME" ]; then
            CERTIFICATE_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Apple Distribution" | head -1 | sed -n 's/.*"\(.*\)".*/\1/p')
          fi
          echo "CERTIFICATE_NAME=$CERTIFICATE_NAME" >> $CM_ENV
          echo "Found certificate: $CERTIFICATE_NAME"
      
      - name: Install CocoaPods dependencies
        script: |
          set -e
          
          if [ -f "Podfile" ]; then
            echo "Found Podfile, recreating it with proper configuration..."
            cp Podfile Podfile.backup
            
            # Create optimized Podfile
            cat > Podfile <<'EOF'
          platform :ios, '13.0'
          
          use_frameworks! :linkage => :static
          
          target 'Unity-iPhone' do
            pod 'Google-Mobile-Ads-SDK', '~> 11.0'
            pod 'GoogleUserMessagingPlatform', '~> 2.0'
          end
          
          post_install do |installer|
            installer.pods_project.targets.each do |target|
              target.build_configurations.each do |config|
                config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
                config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
                config.build_settings['CLANG_WARN_NON_MODULAR_INCLUDE_IN_FRAMEWORK_MODULE'] = 'NO'
                config.build_settings['IPHONEOS_DEPLOYMENT_TARGET'] = '13.0'
                config.build_settings['ENABLE_BITCODE'] = 'NO'
                config.build_settings['BUILD_LIBRARY_FOR_DISTRIBUTION'] = 'YES'
              end
            end
          end
          EOF
            
            echo "Running pod install..."
            rm -rf Pods Podfile.lock
            pod install --repo-update
            
            echo "Checking for workspace files..."
            if [ -d "Unity-iPhone.xcworkspace" ]; then
              echo "✅ Workspace created successfully"
            else
              echo "❌ ERROR: Workspace not created!"
              echo "Current directory contents:"
              ls -la
              exit 1
            fi
          else
            echo "❌ ERROR: No Podfile found!"
            exit 1
          fi
      
      - name: Update Xcode project with signing
        script: |
          set -e
          gem install xcodeproj || true
          
          ruby <<'RUBY'
          require 'xcodeproj'
          project = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          
          # Main app target - needs signing
          target = project.targets.find { |t| t.name == 'Unity-iPhone' }
          target.build_configurations.each do |config|
            config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
            config.build_settings['CODE_SIGN_IDENTITY'] = ENV['CERTIFICATE_NAME']
            config.build_settings['DEVELOPMENT_TEAM'] = 'JQ8ZF3V63Z'
            config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = ENV['PROFILE_NAME']
            config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'YES'
          end
          
          # UnityFramework - use same signing identity as main app, but no provisioning profile
          unity_framework = project.targets.find { |t| t.name == 'UnityFramework' }
          unity_framework.build_configurations.each do |config|
            config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
            config.build_settings['CODE_SIGN_IDENTITY'] = ENV['CERTIFICATE_NAME']
            config.build_settings['DEVELOPMENT_TEAM'] = 'JQ8ZF3V63Z'
            config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
            config.build_settings.delete('PROVISIONING_PROFILE')
            config.build_settings['CODE_SIGN_IDENTITY[sdk=iphoneos*]'] = ENV['CERTIFICATE_NAME']
            
            config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
            config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
            config.build_settings['CLANG_WARN_NON_MODULAR_INCLUDE_IN_FRAMEWORK_MODULE'] = 'NO'
            
            other_cflags = config.build_settings['OTHER_CFLAGS'] || []
            other_cflags = [other_cflags] if other_cflags.is_a?(String)
            other_cflags.delete_if { |flag| flag.to_s.include?('non-modular-include-in-framework-module') }
            other_cflags << '-Wno-error=non-modular-include-in-framework-module'
            other_cflags << '-Wno-non-modular-include-in-framework-module'
            config.build_settings['OTHER_CFLAGS'] = other_cflags
            
            config.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] = 'NO'
          end
          
          # GameAssembly - automatic signing
          game_assembly = project.targets.find { |t| t.name == 'GameAssembly' }
          if game_assembly
            game_assembly.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['DEVELOPMENT_TEAM'] = 'JQ8ZF3V63Z'
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
            end
          end
          
          project.save
          RUBY
          
          # Fix Pods targets
          ruby <<'RUBY'
          require 'xcodeproj'
          pods_project = Xcodeproj::Project.open('Pods/Pods.xcodeproj')
          
          pods_project.targets.each do |target|
            target.build_configurations.each do |config|
              config.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              config.build_settings['CODE_SIGN_IDENTITY'] = ''
              config.build_settings['DEVELOPMENT_TEAM'] = ''
              config.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              config.build_settings.delete('PROVISIONING_PROFILE')
            end
          end
          
          pods_project.save
          RUBY
      
      - name: Fix IL2CPP and library paths
        script: |
          set -e
          
          ruby <<'RUBY'
          require 'xcodeproj'
          project = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          
          # Fix UnityFramework target
          unity_framework = project.targets.find { |t| t.name == 'UnityFramework' }
          unity_framework.build_configurations.each do |config|
            # Add Pods library search path
            search_paths = config.build_settings['LIBRARY_SEARCH_PATHS'] || []
            search_paths = [search_paths] if search_paths.is_a?(String)
            search_paths << '$(inherited)'
            search_paths << '"${PODS_CONFIGURATION_BUILD_DIR}/Google-Mobile-Ads-SDK"'
            search_paths << '"${PODS_CONFIGURATION_BUILD_DIR}/GoogleUserMessagingPlatform"'
            config.build_settings['LIBRARY_SEARCH_PATHS'] = search_paths.uniq
            
            # Add framework search paths
            framework_paths = config.build_settings['FRAMEWORK_SEARCH_PATHS'] || []
            framework_paths = [framework_paths] if framework_paths.is_a?(String)
            framework_paths << '$(inherited)'
            framework_paths << '"${PODS_XCFRAMEWORKS_BUILD_DIR}/GoogleMobileAds"'
            framework_paths << '"${PODS_XCFRAMEWORKS_BUILD_DIR}/UserMessagingPlatform"'
            config.build_settings['FRAMEWORK_SEARCH_PATHS'] = framework_paths.uniq
            
            # Ensure LD_RUNPATH_SEARCH_PATHS includes frameworks
            runpath = config.build_settings['LD_RUNPATH_SEARCH_PATHS'] || []
            runpath = [runpath] if runpath.is_a?(String)
            runpath << '$(inherited)'
            runpath << '@executable_path/Frameworks'
            runpath << '@loader_path/Frameworks'
            config.build_settings['LD_RUNPATH_SEARCH_PATHS'] = runpath.uniq
            
            # Fix IL2CPP warnings/errors
            other_cflags = config.build_settings['OTHER_CFLAGS'] || []
            other_cflags = [other_cflags] if other_cflags.is_a?(String)
            other_cflags << '-Wno-atomic-memory-ordering'
            config.build_settings['OTHER_CFLAGS'] = other_cflags.uniq
            
            # Ensure proper linking
            config.build_settings['CLANG_ENABLE_MODULES'] = 'YES'
            config.build_settings['ENABLE_BITCODE'] = 'NO'
            
            # Add -ObjC linker flag if not present
            other_ldflags = config.build_settings['OTHER_LDFLAGS'] || []
            other_ldflags = [other_ldflags] if other_ldflags.is_a?(String)
            other_ldflags << '$(inherited)'
            other_ldflags << '-ObjC' unless other_ldflags.include?('-ObjC')
            config.build_settings['OTHER_LDFLAGS'] = other_ldflags.uniq
          end
          
          project.save
          RUBY
          
          echo "✅ IL2CPP and library paths configured"
      
      - name: Create export options
        script: |
          cat > $HOME/export_options.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>JQ8ZF3V63Z</string>
            <key>uploadSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF
      
      - name: Build IPA
        script: |
          set -e
          
          # Verify workspace exists
          if [ ! -d "Unity-iPhone.xcworkspace" ]; then
            echo "❌ ERROR: Unity-iPhone.xcworkspace not found. CocoaPods installation may have failed."
            exit 1
          fi
          
          echo "Building with workspace (CocoaPods)"
          
          # Build archive - signing is already configured in project settings
          # Do NOT pass CODE_SIGN_STYLE or PROVISIONING_PROFILE_SPECIFIER on command line
          # as they apply to ALL targets and cause framework signing errors
          xcodebuild \
            -workspace "Unity-iPhone.xcworkspace" \
            -scheme "$XCODE_SCHEME" \
            -archivePath "$HOME/build/Unity-iPhone.xcarchive" \
            -configuration Release \
            archive \
            COMPILER_INDEX_STORE_ENABLE=NO \
            ENABLE_BITCODE=NO \
            | tee "$HOME/xcodebuild_archive.log"
          
          # Export IPA
          xcodebuild \
            -exportArchive \
            -archivePath "$HOME/build/Unity-iPhone.xcarchive" \
            -exportPath "$HOME/build" \
            -exportOptionsPlist "$HOME/export_options.plist" \
            | tee "$HOME/xcodebuild_export.log"
          
          # Copy IPA to expected location
          mkdir -p build/ios/ipa
          cp "$HOME/build/"*.ipa build/ios/ipa/ 2>/dev/null || true
          
          echo "✅ Build completed successfully"
    
    artifacts:
      - build/ios/ipa/*.ipa
      - $HOME/build/*.ipa
      - $HOME/xcodebuild_*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM
    
    publishing:
      email:
        recipients:
          - joshtimallendev@gmail.com
        notify:
          success: true
          failure: true
      
      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true