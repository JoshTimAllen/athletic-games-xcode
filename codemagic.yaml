workflows:
  ios-app-store:
    name: iOS App Store (Unity)
    max_build_duration: 120
    environment:
      groups:
        # Create these in Codemagic > Settings > Environment variables
        # CM_CERT_P12: base64-encoded .p12
        # CM_CERT_PASSWORD: password for the .p12
        # CM_MOBILEPROVISION: base64-encoded .mobileprovision for your App Store profile ("Athletic Games Profile")
        # APP_STORE_CONNECT_API_KEY_JSON: App Store Connect API key JSON (for upload, optional)
      vars:
        UNITY_VERSION: "2022.3.60f1"        # matches the log UNITY_RUNTIME_VERSION
        XCODE_VERSION: "16.4"
        BUNDLE_ID: "com.Josh-TimAllen.AthleticGames"
        TEAM_ID: "JQ8ZF3V63Z"
        CODE_SIGN_IDENTITY: "Apple Distribution: Josh-Tim Allen (JQ8ZF3V63Z)"
        PROFILE_NAME: "Athletic Games Profile"
        SCHEME: "Unity-iPhone"
        PROJECT_PATH: "Unity-iPhone.xcodeproj"
        ARCHIVE_PATH: "$CM_BUILD_DIR/ios/xcarchive/Unity-iPhone.xcarchive"
        EXPORT_DIR: "$CM_BUILD_DIR/ios/export"
        EXPORT_OPTIONS_PLIST: "$CM_BUILD_DIR/exportOptions.plist"
    instance_type: mac_mini_m2
    triggering:
      events:
        - push
      branch_patterns:
        - pattern: "*"
          include: true
          source: true
    scripts:
      - name: Select Xcode
        script: |
          sudo xcode-select -s /Applications/Xcode-${XCODE_VERSION}.app/Contents/Developer
          xcodebuild -version

      - name: Install signing assets (cert + profile)
        script: |
          KEYCHAIN="$HOME/Library/Keychains/codemagic.keychain-db"
          security create-keychain -p "" codemagic.keychain-db
          security set-keychain-settings $KEYCHAIN
          security unlock-keychain -p "" $KEYCHAIN

          # Import certificate
          echo "$CM_CERT_P12" | base64 --decode > cert.p12
          security import cert.p12 -k $KEYCHAIN -P "$CM_CERT_PASSWORD" -A
          security set-key-partition-list -S apple-tool:,apple: -s -k "" $KEYCHAIN

          # Install provisioning profile
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          echo "$CM_MOBILEPROVISION" | base64 --decode > "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_NAME.mobileprovision"

      # If your Unity build to Xcode is part of this CI, add it here.
      # Otherwise, if the repo already contains the generated Xcode project,
      # you can skip this step.
      # - name: Build iOS Xcode project from Unity
      #   script: |
      #     /Applications/Unity/Hub/Editor/${UNITY_VERSION}/Unity.app/Contents/MacOS/Unity \
      #       -batchmode -nographics -quit \
      #       -projectPath "$CM_BUILD_DIR" \
      #       -executeMethod BuildScript.BuildiOS

      - name: Sanity check build settings (no guessing)
        script: |
          xcodebuild -project "$PROJECT_PATH" -scheme "$SCHEME" -showBuildSettings | tee build_settings.txt

      - name: Archive (NO profile override; correct quoting)
        script: |
          set -euo pipefail
          xcodebuild \
            -project "$PROJECT_PATH" \
            -scheme "$SCHEME" \
            -destination "generic/platform=iOS" \
            -archivePath "$ARCHIVE_PATH" \
            DEVELOPMENT_TEAM="$TEAM_ID" \
            CODE_SIGN_IDENTITY="$CODE_SIGN_IDENTITY" \
            COMPILER_INDEX_STORE_ENABLE=NO \
            archive | xcpretty

      - name: Create exportOptions.plist (manual signing with your profile)
        script: |
          mkdir -p "$EXPORT_DIR"
          cat > "$EXPORT_OPTIONS_PLIST" <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key><string>app-store</string>
            <key>signingStyle</key><string>manual</string>
            <key>teamID</key><string>${TEAM_ID}</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key><string>${PROFILE_NAME}</string>
            </dict>
            <key>uploadSymbols</key><true/>
            <key>stripSwiftSymbols</key><true/>
            <key>compileBitcode</key><false/>
          </dict>
          </plist>
          EOF
          cat "$EXPORT_OPTIONS_PLIST"

      - name: Export IPA (this is where the profile is applied)
        script: |
          xcodebuild -exportArchive \
            -archivePath "$ARCHIVE_PATH" \
            -exportPath "$EXPORT_DIR" \
            -exportOptionsPlist "$EXPORT_OPTIONS_PLIST" | xcpretty
          ls -lah "$EXPORT_DIR"

      # Optional: upload to App Store Connect if you want
      # - name: Upload to App Store Connect (optional)
      #   script: |
      #     IPA_PATH="$(ls "$EXPORT_DIR"/*.ipa | head -n1)"
      #     xcrun altool --upload-app -f "$IPA_PATH" -t ios --apiKey "$API_KEY_ID" --apiIssuer "$API_ISSUER_ID"

    artifacts:
      - ios/export/*.ipa
      - ios/xcarchive/**/*.dSYM
      - build_settings.txt
      - $EXPORT_OPTIONS_PLIST
    publishing:
      email:
        recipients:
          - "you@example.com"
        notify:
          success: true
          failure: true
