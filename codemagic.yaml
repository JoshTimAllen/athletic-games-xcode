workflows:
  ios-app-store:
    name: iOS App Store Build
    max_build_duration: 60
    instance_type: mac_mini_m1

    environment:
      groups:
        - ios
      vars:
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        APP_STORE_ID: "YOUR_APP_STORE_APP_ID"
      xcode: latest
      cocoapods: default

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true

    scripts:
      - name: Set up code signing
        script: |
          set -e
          echo $PROVISION_PROFILE_BASE64 | base64 --decode > /tmp/profile.mobileprovision
          PROFILE_UUID=$(grep UUID -A1 -a /tmp/profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp /tmp/profile.mobileprovision ~/Library/MobileDevice/Provisioning\ Profiles/$PROFILE_UUID.mobileprovision
          PROFILE_NAME=$(security cms -D -i /tmp/profile.mobileprovision | plutil -extract Name raw -)
          echo "PROFILE_NAME=$PROFILE_NAME" >> $CM_ENV
          echo "PROFILE_UUID=$PROFILE_UUID" >> $CM_ENV
          echo $P12_BASE64 | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "" build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P $P12_PASSWORD -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain
          CERTIFICATE_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Distribution" | head -1 | sed -n 's/.*"\(.*\)".*/\1/p')
          echo "CERTIFICATE_NAME=$CERTIFICATE_NAME" >> $CM_ENV

      - name: Install CocoaPods dependencies
        script: |
          if [ -f "Podfile" ]; then
            pod install
          fi

      - name: Increment build number
        script: |
          cd Unity-iPhone.xcodeproj/..
          LATEST_BUILD_NUMBER=$(app-store-connect get-latest-build-number "$APP_STORE_ID" --api-key=$APP_STORE_CONNECT_PRIVATE_KEY --issuer-id=$APP_STORE_CONNECT_ISSUER_ID --key-id=$APP_STORE_CONNECT_KEY_IDENTIFIER || echo 0)
          NEXT_BUILD_NUMBER=$((LATEST_BUILD_NUMBER + 1))
          agvtool new-version -all $NEXT_BUILD_NUMBER

      - name: Create export options
        script: |
          cat > $HOME/export_options.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>JQ8ZF3V63Z</string>
            <key>uploadSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

      - name: Update Xcode project with signing
        script: |
          gem install xcodeproj || true
          ruby - <<'RUBY'
          require 'xcodeproj'
          project = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          target = project.targets.find { |t| t.name == 'Unity-iPhone' }
          target.build_configurations.each do |config|
            config.build_settings['CODE_SIGN_STYLE'] = 'Manual'
            config.build_settings['CODE_SIGN_IDENTITY'] = '$CERTIFICATE_NAME'
            config.build_settings['DEVELOPMENT_TEAM'] = 'JQ8ZF3V63Z'
            config.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = '$PROFILE_NAME'
          end
          project.save
          RUBY

      - name: Patch Unity Xcode settings for Xcode 16.4
        script: |
          gem install xcodeproj || true
          ruby - <<'RUBY'
          require 'xcodeproj'
          project = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          unity_framework = project.targets.find { |t| t.name == 'UnityFramework' }
          if unity_framework
            unity_framework.build_configurations.each do |config|
              config.build_settings['GCC_TREAT_WARNINGS_AS_ERRORS'] = 'NO'
              config.build_settings['CLANG_WARN_NON_MODULAR_INCLUDE_IN_FRAMEWORK_MODULE'] = 'NO'
              config.build_settings['CLANG_WARN_QUOTED_INCLUDE_IN_FRAMEWORK_HEADER'] = 'NO'
              config.build_settings['OTHER_CFLAGS'] = [
                '-Wno-non-modular-include-in-framework-module',
                '-Wno-error=non-modular-include-in-framework-module'
              ]
            end
          end
          project.root_object.attributes['TargetAttributes']&.each_value do |attrs|
            attrs['EnableUserScriptSandboxing'] = 'YES'
          end
          project.save
          puts "✅ UnityFramework target patched for Xcode 16.4"
          RUBY

      - name: Inject Unity version macros
        script: |
          gem install xcodeproj || true
          ruby - <<'RUBY'
          require 'xcodeproj'
          project = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          defs = ['UNITY_VERSION_VER=2022', 'UNITY_VERSION_MAJ=3', 'UNITY_VERSION_MIN=62']
          ['UnityFramework','Unity-iPhone'].each do |t|
            target = project.targets.find { |x| x.name == t }
            next unless target
            target.build_configurations.each do |cfg|
              cur = cfg.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] || ['$(inherited)']
              defs.each { |d| cur << d unless cur.any?{|c| c.include?(d.split('=').first)} }
              cfg.build_settings['GCC_PREPROCESSOR_DEFINITIONS'] = cur
            end
          end
          project.save
          puts "✅ Injected Unity 2022.3.62f2 macros"
          RUBY

      - name: Fix UnityAds + UnityAnalytics includes (final)
        script: |
          gem install xcodeproj || true
          ruby - <<'RUBY'
          require 'xcodeproj'
          project = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          target = project.targets.find { |t| t.name == 'UnityFramework' }
          if target
            target.build_configurations.each do |cfg|
              hdr = Array(cfg.build_settings['HEADER_SEARCH_PATHS'])
              frm = Array(cfg.build_settings['FRAMEWORK_SEARCH_PATHS'])

              [
                '$(PROJECT_DIR)/Libraries/com.unity.ads/Plugins/iOS',
                '$(PROJECT_DIR)/Libraries/com.unity.analytics/Plugins/iOS',
                '$(PROJECT_DIR)/Libraries/com.unity.ads.ios-support/Runtime/Plugins/iOS',
                '$(PROJECT_DIR)/Libraries/UnityAds.framework'
              ].each do |p|
                hdr << p unless hdr.include?(p)
                frm << p unless frm.include?(p)
              end

              cfg.build_settings['HEADER_SEARCH_PATHS'] = hdr + ['$(inherited)']
              cfg.build_settings['FRAMEWORK_SEARCH_PATHS'] = frm + ['$(inherited)']
              cfg.build_settings['CLANG_ENABLE_MODULES'] = 'NO'
              cfg.build_settings['DEFINES_MODULE'] = 'NO'
              cfg.build_settings['ENABLE_MODULE_VERIFIER'] = 'NO'
              cfg.build_settings['CLANG_ALLOW_NON_MODULAR_INCLUDES_IN_FRAMEWORK_MODULES'] = 'YES'
            end
            puts "✅ Fixed UnityAdsUnityWrapper imports and Analytics includes"
          end
          project.save
          RUBY

      - name: Ensure keychain unlocked
        script: security unlock-keychain -p "" build.keychain

      - name: Build IPA
        script: |
          xcode-project build-ipa \
            --project "$XCODE_PROJECT" \
            --scheme "$XCODE_SCHEME" \
            --export-options-plist $HOME/export_options.plist

    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      email:
        recipients:
          - joshtimallendev@gmail.com
        notify:
          success: true
          failure: true
      app_store_connect:
        api_key: APP_STORE_CONNECT_PRIVATE_KEY
        key_id: APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
