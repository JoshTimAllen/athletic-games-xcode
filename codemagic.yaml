workflows:
  ios-app-store:
    name: iOS App Store Build
    max_build_duration: 60
    instance_type: mac_mini_m1

    environment:
      groups:
        - ios
      vars:
        XCODE_PROJECT: "Unity-iPhone.xcodeproj"
        XCODE_SCHEME: "Unity-iPhone"
        APP_STORE_ID: "$APP_STORE_ID"
        # Your bundle id as seen in the build settings/Info.plist
        BUNDLE_ID: "com.Josh-TimAllen.AthleticGames"
        TEAM_ID: "JQ8ZF3V63Z"
        PROFILE_READABLE_NAME: "Athletic Games Profile"
      xcode: latest
      cocoapods: default

    triggering:
      events:
        - push
      branch_patterns:
        - pattern: 'main'
          include: true
          source: true

    scripts:
      - name: Set up code signing
        script: |
          set -e

          # --- Provisioning profile (App Store profile for the APP target) ---
          echo "$PROVISION_PROFILE_BASE64" | base64 --decode > /tmp/profile.mobileprovision
          PROFILE_UUID=$(grep UUID -A1 -a /tmp/profile.mobileprovision | grep -io "[-A-F0-9]\{36\}")
          mkdir -p "$HOME/Library/MobileDevice/Provisioning Profiles"
          cp /tmp/profile.mobileprovision "$HOME/Library/MobileDevice/Provisioning Profiles/$PROFILE_UUID.mobileprovision"

          # Extract profile "Name" (human readable)
          PROFILE_NAME=$(security cms -D -i /tmp/profile.mobileprovision | plutil -extract Name raw -)
          echo "PROFILE_NAME=${PROFILE_NAME}" >> $CM_ENV
          echo "PROFILE_UUID=${PROFILE_UUID}" >> $CM_ENV

          # --- P12 certificate import (Apple Distribution) ---
          echo "$P12_BASE64" | base64 --decode > /tmp/certificate.p12
          security create-keychain -p "" build.keychain
          security list-keychains -s build.keychain
          security default-keychain -s build.keychain
          security unlock-keychain -p "" build.keychain
          security set-keychain-settings -t 3600 -u build.keychain
          security import /tmp/certificate.p12 -k build.keychain -P "$P12_PASSWORD" -T /usr/bin/codesign -T /usr/bin/security
          security set-key-partition-list -S apple-tool:,apple: -s -k "" build.keychain

          # Prefer Apple Distribution identity
          CERTIFICATE_NAME=$(security find-identity -v -p codesigning build.keychain | grep "Apple Distribution" | head -1 | sed -n 's/.*"\(.*\)".*/\1/p')
          if [ -z "$CERTIFICATE_NAME" ]; then
            CERTIFICATE_NAME=$(security find-identity -v -p codesigning build.keychain | grep "iPhone Distribution" | head -1 | sed -n 's/.*"\(.*\)".*/\1/p')
          fi
          echo "CERTIFICATE_NAME=${CERTIFICATE_NAME}" >> $CM_ENV
          echo "Using signing identity: $CERTIFICATE_NAME"

      - name: Install CocoaPods (if present)
        script: |
          if [ -f "Podfile" ]; then
            pod install --repo-update
          fi

      - name: Determine bundle id & latest build number
        script: |
          set -e
          # Confirm bundle id from Info.plist
          INFO_BUNDLE_ID=$(/usr/libexec/PlistBuddy -c "Print CFBundleIdentifier" Info.plist)
          echo "Detected CFBundleIdentifier: $INFO_BUNDLE_ID"
          echo "BUNDLE_ID=${INFO_BUNDLE_ID:-$BUNDLE_ID}" >> $CM_ENV

          # Bump build number from ASC
          LATEST=$(app-store-connect get-latest-build-number "$APP_STORE_ID" || echo 0)
          NEXT=$((LATEST + 1))
          echo "Next build number: $NEXT"
          agvtool new-version -all $NEXT || true

      - name: Fix per-target signing (App target Manual, UnityFramework Automatic)
        script: |
          set -e
          gem install xcodeproj -N || true
          ruby - <<'RUBY'
          require 'xcodeproj'
          project_path = 'Unity-iPhone.xcodeproj'
          proj = Xcodeproj::Project.open(project_path)

          team_id = ENV['TEAM_ID']
          cert     = ENV['CERTIFICATE_NAME']
          profname = ENV['PROFILE_NAME'] || ENV['PROFILE_READABLE_NAME']

          app_target = proj.targets.find { |t| t.name == 'Unity-iPhone' }
          ufw_target = proj.targets.find { |t| t.name == 'UnityFramework' }

          # --- Unity-iPhone (the app) -> Manual with explicit provisioning profile ---
          app_target.build_configurations.each do |c|
            c.build_settings['CODE_SIGN_STYLE'] = 'Manual'
            c.build_settings['DEVELOPMENT_TEAM'] = team_id
            c.build_settings['CODE_SIGN_IDENTITY'] = cert
            c.build_settings['PROVISIONING_PROFILE_SPECIFIER'] = profname
            # Make sure runpath & embed swift libs are sane
            c.build_settings['ALWAYS_EMBED_SWIFT_STANDARD_LIBRARIES'] ||= 'YES'
          end

          # --- UnityFramework -> Automatic, NO provisioning profile (frameworks don't use them) ---
          if ufw_target
            ufw_target.build_configurations.each do |c|
              c.build_settings['CODE_SIGN_STYLE'] = 'Automatic'
              c.build_settings['DEVELOPMENT_TEAM'] = team_id
              c.build_settings.delete('PROVISIONING_PROFILE_SPECIFIER')
              c.build_settings.delete('PROVISIONING_PROFILE')
              # Some projects set CODE_SIGNING_ALLOWED explicitly; keep it allowed.
              c.build_settings['CODE_SIGNING_ALLOWED'] = 'YES'
            end
          end

          proj.save
          RUBY

      - name: Create export options (App Store)
        script: |
          set -e
          : "${BUNDLE_ID:?Missing BUNDLE_ID}"
          : "${PROFILE_NAME:?Missing PROFILE_NAME}"
          cat > $HOME/export_options.plist <<EOF
          <?xml version="1.0" encoding="UTF-8"?>
          <!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
          <plist version="1.0">
          <dict>
            <key>method</key>
            <string>app-store</string>
            <key>teamID</key>
            <string>${TEAM_ID}</string>
            <key>signingStyle</key>
            <string>manual</string>
            <key>provisioningProfiles</key>
            <dict>
              <key>${BUNDLE_ID}</key>
              <string>${PROFILE_NAME}</string>
            </dict>
            <key>uploadSymbols</key>
            <true/>
            <key>uploadBitcode</key>
            <false/>
          </dict>
          </plist>
          EOF

      - name: (Optional) tidy framework search paths
        script: |
          set -e
          # Avoid entries that end with ".framework" path (Xcode warns about these)
          gem install xcodeproj -N || true
          ruby - <<'RUBY'
          require 'xcodeproj'
          proj = Xcodeproj::Project.open('Unity-iPhone.xcodeproj')
          proj.targets.each do |t|
            t.build_configurations.each do |c|
              v = c.build_settings['FRAMEWORK_SEARCH_PATHS']
              next unless v
              arr = Array(v).flatten
              arr.reject! { |p| p.strip.end_with?('.framework') }
              c.build_settings['FRAMEWORK_SEARCH_PATHS'] = arr.uniq
            end
          end
          proj.save
          RUBY

      - name: Build IPA (archive + export)
        script: |
          set -e
          # Extra xcargs ensure the right identity is used during archive
          xcode-project build-ipa \
            --project "$XCODE_PROJECT" \
            --scheme "$XCODE_SCHEME" \
            --archive-flags "CODE_SIGN_IDENTITY=${CERTIFICATE_NAME} DEVELOPMENT_TEAM=${TEAM_ID} CODE_SIGN_STYLE=Manual PROVISIONING_PROFILE_SPECIFIER=${PROFILE_NAME}" \
            --export-options-plist "$HOME/export_options.plist"

    artifacts:
      - build/ios/ipa/*.ipa
      - /tmp/xcodebuild_logs/*.log
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.app
      - $HOME/Library/Developer/Xcode/DerivedData/**/Build/**/*.dSYM

    publishing:
      email:
        recipients:
          - joshtimallendev@gmail.com
        notify:
          success: true
          failure: true

      app_store_connect:
        api_key: $APP_STORE_CONNECT_PRIVATE_KEY
        key_id: $APP_STORE_CONNECT_KEY_IDENTIFIER
        issuer_id: $APP_STORE_CONNECT_ISSUER_ID
        submit_to_testflight: true
        # submit_to_app_store: true
